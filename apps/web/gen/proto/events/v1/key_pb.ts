// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file events/v1/key.proto (package events.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum events.v1.KeyEventType
 */
export enum KeyEventType {
  /**
   * @generated from enum value: KEY_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A new key was created
   *
   * @generated from enum value: KEY_EVENT_TYPE_CREATED = 1;
   */
  CREATED = 1,

  /**
   * A key was updated
   *
   * @generated from enum value: KEY_EVENT_TYPE_UPDATED = 2;
   */
  UPDATED = 2,

  /**
   * A key was deleted
   *
   * @generated from enum value: KEY_EVENT_TYPE_DELETED = 3;
   */
  DELETED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(KeyEventType)
proto3.util.setEnumType(KeyEventType, "events.v1.KeyEventType", [
  { no: 0, name: "KEY_EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "KEY_EVENT_TYPE_CREATED" },
  { no: 2, name: "KEY_EVENT_TYPE_UPDATED" },
  { no: 3, name: "KEY_EVENT_TYPE_DELETED" },
]);

/**
 * @generated from message events.v1.Key
 */
export class Key extends Message<Key> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string hash = 2;
   */
  hash = "";

  constructor(data?: PartialMessage<Key>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "events.v1.Key";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Key {
    return new Key().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJsonString(jsonString, options);
  }

  static equals(
    a: Key | PlainMessage<Key> | undefined,
    b: Key | PlainMessage<Key> | undefined,
  ): boolean {
    return proto3.util.equals(Key, a, b);
  }
}

/**
 * @generated from message events.v1.KeyEvent
 */
export class KeyEvent extends Message<KeyEvent> {
  /**
   * The type of event
   *
   * @generated from field: events.v1.KeyEventType type = 1;
   */
  type = KeyEventType.UNSPECIFIED;

  /**
   * The key that was created
   *
   * @generated from field: events.v1.Key key = 2;
   */
  key?: Key;

  constructor(data?: PartialMessage<KeyEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "events.v1.KeyEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(KeyEventType) },
    { no: 2, name: "key", kind: "message", T: Key },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyEvent {
    return new KeyEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyEvent {
    return new KeyEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyEvent {
    return new KeyEvent().fromJsonString(jsonString, options);
  }

  static equals(
    a: KeyEvent | PlainMessage<KeyEvent> | undefined,
    b: KeyEvent | PlainMessage<KeyEvent> | undefined,
  ): boolean {
    return proto3.util.equals(KeyEvent, a, b);
  }
}
