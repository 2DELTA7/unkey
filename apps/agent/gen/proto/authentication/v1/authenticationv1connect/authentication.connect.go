// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/authentication/v1/authentication.proto

package authenticationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/unkeyed/unkey/apps/agent/gen/proto/authentication/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeysServiceName is the fully-qualified name of the KeysService service.
	KeysServiceName = "proto.authentication.v1.KeysService"
)

// KeysServiceClient is a client for the proto.authentication.v1.KeysService service.
type KeysServiceClient interface {
	CreateKey(context.Context, *connect_go.Request[v1.CreateKeyRequest]) (*connect_go.Response[v1.CreateKeyResponse], error)
	SoftDeleteKey(context.Context, *connect_go.Request[v1.SoftDeleteKeyRequest]) (*connect_go.Response[v1.SoftDeleteKeyResponse], error)
	VerifyKey(context.Context, *connect_go.Request[v1.VerifyKeyRequest]) (*connect_go.Response[v1.VerifyKeyResponse], error)
}

// NewKeysServiceClient constructs a client for the proto.authentication.v1.KeysService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeysServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeysServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keysServiceClient{
		createKey: connect_go.NewClient[v1.CreateKeyRequest, v1.CreateKeyResponse](
			httpClient,
			baseURL+"/proto.authentication.v1.KeysService/CreateKey",
			opts...,
		),
		softDeleteKey: connect_go.NewClient[v1.SoftDeleteKeyRequest, v1.SoftDeleteKeyResponse](
			httpClient,
			baseURL+"/proto.authentication.v1.KeysService/SoftDeleteKey",
			opts...,
		),
		verifyKey: connect_go.NewClient[v1.VerifyKeyRequest, v1.VerifyKeyResponse](
			httpClient,
			baseURL+"/proto.authentication.v1.KeysService/VerifyKey",
			opts...,
		),
	}
}

// keysServiceClient implements KeysServiceClient.
type keysServiceClient struct {
	createKey     *connect_go.Client[v1.CreateKeyRequest, v1.CreateKeyResponse]
	softDeleteKey *connect_go.Client[v1.SoftDeleteKeyRequest, v1.SoftDeleteKeyResponse]
	verifyKey     *connect_go.Client[v1.VerifyKeyRequest, v1.VerifyKeyResponse]
}

// CreateKey calls proto.authentication.v1.KeysService.CreateKey.
func (c *keysServiceClient) CreateKey(ctx context.Context, req *connect_go.Request[v1.CreateKeyRequest]) (*connect_go.Response[v1.CreateKeyResponse], error) {
	return c.createKey.CallUnary(ctx, req)
}

// SoftDeleteKey calls proto.authentication.v1.KeysService.SoftDeleteKey.
func (c *keysServiceClient) SoftDeleteKey(ctx context.Context, req *connect_go.Request[v1.SoftDeleteKeyRequest]) (*connect_go.Response[v1.SoftDeleteKeyResponse], error) {
	return c.softDeleteKey.CallUnary(ctx, req)
}

// VerifyKey calls proto.authentication.v1.KeysService.VerifyKey.
func (c *keysServiceClient) VerifyKey(ctx context.Context, req *connect_go.Request[v1.VerifyKeyRequest]) (*connect_go.Response[v1.VerifyKeyResponse], error) {
	return c.verifyKey.CallUnary(ctx, req)
}

// KeysServiceHandler is an implementation of the proto.authentication.v1.KeysService service.
type KeysServiceHandler interface {
	CreateKey(context.Context, *connect_go.Request[v1.CreateKeyRequest]) (*connect_go.Response[v1.CreateKeyResponse], error)
	SoftDeleteKey(context.Context, *connect_go.Request[v1.SoftDeleteKeyRequest]) (*connect_go.Response[v1.SoftDeleteKeyResponse], error)
	VerifyKey(context.Context, *connect_go.Request[v1.VerifyKeyRequest]) (*connect_go.Response[v1.VerifyKeyResponse], error)
}

// NewKeysServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeysServiceHandler(svc KeysServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.authentication.v1.KeysService/CreateKey", connect_go.NewUnaryHandler(
		"/proto.authentication.v1.KeysService/CreateKey",
		svc.CreateKey,
		opts...,
	))
	mux.Handle("/proto.authentication.v1.KeysService/SoftDeleteKey", connect_go.NewUnaryHandler(
		"/proto.authentication.v1.KeysService/SoftDeleteKey",
		svc.SoftDeleteKey,
		opts...,
	))
	mux.Handle("/proto.authentication.v1.KeysService/VerifyKey", connect_go.NewUnaryHandler(
		"/proto.authentication.v1.KeysService/VerifyKey",
		svc.VerifyKey,
		opts...,
	))
	return "/proto.authentication.v1.KeysService/", mux
}

// UnimplementedKeysServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeysServiceHandler struct{}

func (UnimplementedKeysServiceHandler) CreateKey(context.Context, *connect_go.Request[v1.CreateKeyRequest]) (*connect_go.Response[v1.CreateKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.authentication.v1.KeysService.CreateKey is not implemented"))
}

func (UnimplementedKeysServiceHandler) SoftDeleteKey(context.Context, *connect_go.Request[v1.SoftDeleteKeyRequest]) (*connect_go.Response[v1.SoftDeleteKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.authentication.v1.KeysService.SoftDeleteKey is not implemented"))
}

func (UnimplementedKeysServiceHandler) VerifyKey(context.Context, *connect_go.Request[v1.VerifyKeyRequest]) (*connect_go.Response[v1.VerifyKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.authentication.v1.KeysService.VerifyKey is not implemented"))
}
