// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/apis/v1/apis.proto

package apisv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/unkeyed/unkey/apps/agent/gen/proto/apis/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "proto.apis.v1.ApiService"
)

// ApiServiceClient is a client for the proto.apis.v1.ApiService service.
type ApiServiceClient interface {
	CreateApi(context.Context, *connect_go.Request[v1.CreateApiRequest]) (*connect_go.Response[v1.CreateApiResponse], error)
	DeleteApi(context.Context, *connect_go.Request[v1.DeleteApiRequest]) (*connect_go.Response[v1.DeleteApiResponse], error)
	FindApi(context.Context, *connect_go.Request[v1.FindApiRequest]) (*connect_go.Response[v1.FindApiResponse], error)
	ListApis(context.Context, *connect_go.Request[v1.ListApisRequest]) (*connect_go.Response[v1.ListApisResponse], error)
}

// NewApiServiceClient constructs a client for the proto.apis.v1.ApiService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiServiceClient{
		createApi: connect_go.NewClient[v1.CreateApiRequest, v1.CreateApiResponse](
			httpClient,
			baseURL+"/proto.apis.v1.ApiService/CreateApi",
			opts...,
		),
		deleteApi: connect_go.NewClient[v1.DeleteApiRequest, v1.DeleteApiResponse](
			httpClient,
			baseURL+"/proto.apis.v1.ApiService/DeleteApi",
			opts...,
		),
		findApi: connect_go.NewClient[v1.FindApiRequest, v1.FindApiResponse](
			httpClient,
			baseURL+"/proto.apis.v1.ApiService/FindApi",
			opts...,
		),
		listApis: connect_go.NewClient[v1.ListApisRequest, v1.ListApisResponse](
			httpClient,
			baseURL+"/proto.apis.v1.ApiService/ListApis",
			opts...,
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	createApi *connect_go.Client[v1.CreateApiRequest, v1.CreateApiResponse]
	deleteApi *connect_go.Client[v1.DeleteApiRequest, v1.DeleteApiResponse]
	findApi   *connect_go.Client[v1.FindApiRequest, v1.FindApiResponse]
	listApis  *connect_go.Client[v1.ListApisRequest, v1.ListApisResponse]
}

// CreateApi calls proto.apis.v1.ApiService.CreateApi.
func (c *apiServiceClient) CreateApi(ctx context.Context, req *connect_go.Request[v1.CreateApiRequest]) (*connect_go.Response[v1.CreateApiResponse], error) {
	return c.createApi.CallUnary(ctx, req)
}

// DeleteApi calls proto.apis.v1.ApiService.DeleteApi.
func (c *apiServiceClient) DeleteApi(ctx context.Context, req *connect_go.Request[v1.DeleteApiRequest]) (*connect_go.Response[v1.DeleteApiResponse], error) {
	return c.deleteApi.CallUnary(ctx, req)
}

// FindApi calls proto.apis.v1.ApiService.FindApi.
func (c *apiServiceClient) FindApi(ctx context.Context, req *connect_go.Request[v1.FindApiRequest]) (*connect_go.Response[v1.FindApiResponse], error) {
	return c.findApi.CallUnary(ctx, req)
}

// ListApis calls proto.apis.v1.ApiService.ListApis.
func (c *apiServiceClient) ListApis(ctx context.Context, req *connect_go.Request[v1.ListApisRequest]) (*connect_go.Response[v1.ListApisResponse], error) {
	return c.listApis.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the proto.apis.v1.ApiService service.
type ApiServiceHandler interface {
	CreateApi(context.Context, *connect_go.Request[v1.CreateApiRequest]) (*connect_go.Response[v1.CreateApiResponse], error)
	DeleteApi(context.Context, *connect_go.Request[v1.DeleteApiRequest]) (*connect_go.Response[v1.DeleteApiResponse], error)
	FindApi(context.Context, *connect_go.Request[v1.FindApiRequest]) (*connect_go.Response[v1.FindApiResponse], error)
	ListApis(context.Context, *connect_go.Request[v1.ListApisRequest]) (*connect_go.Response[v1.ListApisResponse], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.apis.v1.ApiService/CreateApi", connect_go.NewUnaryHandler(
		"/proto.apis.v1.ApiService/CreateApi",
		svc.CreateApi,
		opts...,
	))
	mux.Handle("/proto.apis.v1.ApiService/DeleteApi", connect_go.NewUnaryHandler(
		"/proto.apis.v1.ApiService/DeleteApi",
		svc.DeleteApi,
		opts...,
	))
	mux.Handle("/proto.apis.v1.ApiService/FindApi", connect_go.NewUnaryHandler(
		"/proto.apis.v1.ApiService/FindApi",
		svc.FindApi,
		opts...,
	))
	mux.Handle("/proto.apis.v1.ApiService/ListApis", connect_go.NewUnaryHandler(
		"/proto.apis.v1.ApiService/ListApis",
		svc.ListApis,
		opts...,
	))
	return "/proto.apis.v1.ApiService/", mux
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) CreateApi(context.Context, *connect_go.Request[v1.CreateApiRequest]) (*connect_go.Response[v1.CreateApiResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.apis.v1.ApiService.CreateApi is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteApi(context.Context, *connect_go.Request[v1.DeleteApiRequest]) (*connect_go.Response[v1.DeleteApiResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.apis.v1.ApiService.DeleteApi is not implemented"))
}

func (UnimplementedApiServiceHandler) FindApi(context.Context, *connect_go.Request[v1.FindApiRequest]) (*connect_go.Response[v1.FindApiResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.apis.v1.ApiService.FindApi is not implemented"))
}

func (UnimplementedApiServiceHandler) ListApis(context.Context, *connect_go.Request[v1.ListApisRequest]) (*connect_go.Response[v1.ListApisResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.apis.v1.ApiService.ListApis is not implemented"))
}
