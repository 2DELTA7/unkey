// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: key_find_with_api.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const findKeyWithApi = `-- name: FindKeyWithApi :one
SELECT
  ` + "`" + `keys` + "`" + `.id, ` + "`" + `keys` + "`" + `.hash, ` + "`" + `keys` + "`" + `.start, ` + "`" + `keys` + "`" + `.owner_id, ` + "`" + `keys` + "`" + `.meta, ` + "`" + `keys` + "`" + `.created_at, ` + "`" + `keys` + "`" + `.expires, ` + "`" + `keys` + "`" + `.ratelimit_type, ` + "`" + `keys` + "`" + `.ratelimit_limit, ` + "`" + `keys` + "`" + `.ratelimit_refill_rate, ` + "`" + `keys` + "`" + `.ratelimit_refill_interval, ` + "`" + `keys` + "`" + `.workspace_id, ` + "`" + `keys` + "`" + `.for_workspace_id, ` + "`" + `keys` + "`" + `.name, ` + "`" + `keys` + "`" + `.remaining_requests, ` + "`" + `keys` + "`" + `.key_auth_id, ` + "`" + `keys` + "`" + `.total_uses, ` + "`" + `keys` + "`" + `.deleted_at , apis.id, apis.name, apis.workspace_id, apis.ip_whitelist, apis.auth_type, apis.key_auth_id
FROM
  ` + "`" + `keys` + "`" + `
  JOIN apis ON keys.key_auth_id = apis.key_auth_id
WHERE
  hash = ?
`

type FindKeyWithApiRow struct {
	ID                      string
	Hash                    string
	Start                   string
	OwnerID                 sql.NullString
	Meta                    sql.NullString
	CreatedAt               time.Time
	Expires                 sql.NullTime
	RatelimitType           sql.NullString
	RatelimitLimit          sql.NullInt32
	RatelimitRefillRate     sql.NullInt32
	RatelimitRefillInterval sql.NullInt32
	WorkspaceID             string
	ForWorkspaceID          sql.NullString
	Name                    sql.NullString
	RemainingRequests       sql.NullInt32
	KeyAuthID               string
	TotalUses               sql.NullInt64
	DeletedAt               sql.NullTime
	Api                     Api
}

func (q *Queries) FindKeyWithApi(ctx context.Context, hash string) (FindKeyWithApiRow, error) {
	row := q.db.QueryRowContext(ctx, findKeyWithApi, hash)
	var i FindKeyWithApiRow
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Start,
		&i.OwnerID,
		&i.Meta,
		&i.CreatedAt,
		&i.Expires,
		&i.RatelimitType,
		&i.RatelimitLimit,
		&i.RatelimitRefillRate,
		&i.RatelimitRefillInterval,
		&i.WorkspaceID,
		&i.ForWorkspaceID,
		&i.Name,
		&i.RemainingRequests,
		&i.KeyAuthID,
		&i.TotalUses,
		&i.DeletedAt,
		&i.Api.ID,
		&i.Api.Name,
		&i.Api.WorkspaceID,
		&i.Api.IpWhitelist,
		&i.Api.AuthType,
		&i.Api.KeyAuthID,
	)
	return i, err
}
